% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/developer-APIS.R
\name{getLastIndex}
\alias{getLastIndex}
\alias{allocateSharedMemory}
\alias{allocateNamedSharedMemory}
\alias{mapSharedMemory}
\alias{unmapSharedMemory}
\alias{freeSharedMemory}
\alias{hasSharedMemory}
\alias{getSharedMemorySize}
\title{Functions to manipulate shared memory}
\usage{
getLastIndex()

allocateSharedMemory(size)

allocateNamedSharedMemory(name, size)

mapSharedMemory(x)

unmapSharedMemory(x)

freeSharedMemory(x)

hasSharedMemory(x)

getSharedMemorySize(x)
}
\arguments{
\item{size}{numeric(1), the size of the shared memory that you want to allocate}

\item{name}{character(1), a single name that names the shared memory}

\item{x}{integer(1) or character(1), an ID or a name that is used to find
the shared memory. If x is a character with pure number, it will be
treated as an ID.}
}
\value{
\code{getLastIndex}: An interger ID served as a hint of the last created shared memory ID.

\code{allocateSharedMemory}: an integer ID that can be used to find the shared memory

\code{allocateNamedSharedMemory}: no return value

\code{mapSharedMemory}: An external pointer to the shared memory

\code{unmapSharedMemory}: Logical value indicating whether the operation is success.

\code{freeSharedMemory}: Logical value indicating whether the operation is success.

\code{hasSharedMemory}: Logical value indicating whether the shared memory exist

\code{getSharedMemorySize}: A numeric value
}
\description{
These functions are for package developers only, they can
allocate, open, close and destroy shared memory without touching
C++ code. Normal users should not use these functions unless
dealing with memory leaking
}
\details{
\strong{Quick explanation}

\code{getLastIndex}: the ID of the last created shared memory.

\code{allocateSharedMemory}: allocate a shared memory of a given size,
the memory ID is returned by the function

\code{allocateNamedSharedMemory}: allocate a shared memory of a given size, the memory
can be found by the name that is passed to the function.

\code{mapSharedMemory}: map the shared memory to the current process memory space

\code{unmapSharedMemory}: unmap the shared memory(without destroying it)

\code{freeSharedMemory}: destroy the shared memory. This function will only unmap the
shared memory on Windows.

\code{hasSharedMemory}: whether the memory exist?

\code{getSharedMemorySize}: get the actual size of the shared memory, it may be larger than the
size you required.

\strong{Details}

Creating and using shared memory involves three steps: allocating, mapping, and
destroying the shared memory. There are two types of naming scheme that you can
use to find the shared memory: an integer ID or a character name. They are determined
in the first creation step.

The shared memory can be created by \code{allocateSharedMemory} or
\code{allocateNamedSharedMemory}.
The function \code{allocateSharedMemory} will return the ID of the shared memory.
After creating the shared memory, it can be mapped to the current process by
\code{mapSharedMemory}. The return value is an external pointer to the shared memory.
Once the shared memory is no longer needed, it can be destroyed by \code{freeSharedMemory}.
There is no need to unmap the shared memory unless you intentionally want to do so.
}
\examples{
size <- 10L
## unnamed shared memory
id <- allocateSharedMemory(size)
hasSharedMemory(id)
ptr <- mapSharedMemory(id)
ptr
getSharedMemorySize(id)
freeSharedMemory(id)
hasSharedMemory(id)

## named shared memory
name <- "SharedObjectExample"
if(!hasSharedMemory(name)){
    allocateNamedSharedMemory(name,size)
    hasSharedMemory(name)
    ptr <- mapSharedMemory(name)
    ptr
    getSharedMemorySize(name)
    freeSharedMemory(name)
    hasSharedMemory(name)
}
}
\seealso{
\code{\link{listSharedObject}}
}
