// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "sharedObject_types.h"
#include <Rcpp.h>

using namespace Rcpp;

// C_peekSharedMemory
SEXP C_peekSharedMemory(SEXP x);
RcppExport SEXP _sharedObject_C_peekSharedMemory(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(C_peekSharedMemory(x));
    return rcpp_result_gen;
END_RCPP
}
// C_testFunc
SEXP C_testFunc(SEXP a);
RcppExport SEXP _sharedObject_C_testFunc(SEXP aSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type a(aSEXP);
    rcpp_result_gen = Rcpp::wrap(C_testFunc(a));
    return rcpp_result_gen;
END_RCPP
}
// C_findAvailableKey
DID C_findAvailableKey(DID did);
RcppExport SEXP _sharedObject_C_findAvailableKey(SEXP didSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DID >::type did(didSEXP);
    rcpp_result_gen = Rcpp::wrap(C_findAvailableKey(did));
    return rcpp_result_gen;
END_RCPP
}
// C_createSharedMemory
void C_createSharedMemory(SEXP R_x, SEXP R_dataInfo);
RcppExport SEXP _sharedObject_C_createSharedMemory(SEXP R_xSEXP, SEXP R_dataInfoSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type R_x(R_xSEXP);
    Rcpp::traits::input_parameter< SEXP >::type R_dataInfo(R_dataInfoSEXP);
    C_createSharedMemory(R_x, R_dataInfo);
    return R_NilValue;
END_RCPP
}
// C_readSharedMemory
SEXP C_readSharedMemory(double R_DID);
RcppExport SEXP _sharedObject_C_readSharedMemory(SEXP R_DIDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type R_DID(R_DIDSEXP);
    rcpp_result_gen = Rcpp::wrap(C_readSharedMemory(R_DID));
    return rcpp_result_gen;
END_RCPP
}
// C_createAltrep
SEXP C_createAltrep(SEXP SM_obj);
RcppExport SEXP _sharedObject_C_createAltrep(SEXP SM_objSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type SM_obj(SM_objSEXP);
    rcpp_result_gen = Rcpp::wrap(C_createAltrep(SM_obj));
    return rcpp_result_gen;
END_RCPP
}
// C_clearObj
void C_clearObj(double did);
RcppExport SEXP _sharedObject_C_clearObj(SEXP didSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type did(didSEXP);
    C_clearObj(did);
    return R_NilValue;
END_RCPP
}
// C_getDataID
std::vector<double> C_getDataID();
RcppExport SEXP _sharedObject_C_getDataID() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(C_getDataID());
    return rcpp_result_gen;
END_RCPP
}
// C_getDataInfo
NumericVector C_getDataInfo(DID did);
RcppExport SEXP _sharedObject_C_getDataInfo(SEXP didSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DID >::type did(didSEXP);
    rcpp_result_gen = Rcpp::wrap(C_getDataInfo(did));
    return rcpp_result_gen;
END_RCPP
}
// C_attachAttr
SEXP C_attachAttr(SEXP R_source, SEXP R_tag, SEXP R_attr);
RcppExport SEXP _sharedObject_C_attachAttr(SEXP R_sourceSEXP, SEXP R_tagSEXP, SEXP R_attrSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type R_source(R_sourceSEXP);
    Rcpp::traits::input_parameter< SEXP >::type R_tag(R_tagSEXP);
    Rcpp::traits::input_parameter< SEXP >::type R_attr(R_attrSEXP);
    rcpp_result_gen = Rcpp::wrap(C_attachAttr(R_source, R_tag, R_attr));
    return rcpp_result_gen;
END_RCPP
}
// C_ALTREP
bool C_ALTREP(SEXP x);
RcppExport SEXP _sharedObject_C_ALTREP(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(C_ALTREP(x));
    return rcpp_result_gen;
END_RCPP
}
// C_getCopyOnWrite
bool C_getCopyOnWrite(DID did);
RcppExport SEXP _sharedObject_C_getCopyOnWrite(SEXP didSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DID >::type did(didSEXP);
    rcpp_result_gen = Rcpp::wrap(C_getCopyOnWrite(did));
    return rcpp_result_gen;
END_RCPP
}
// C_getSharedSub
bool C_getSharedSub(DID did);
RcppExport SEXP _sharedObject_C_getSharedSub(SEXP didSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DID >::type did(didSEXP);
    rcpp_result_gen = Rcpp::wrap(C_getSharedSub(did));
    return rcpp_result_gen;
END_RCPP
}
// C_getSharedDuplicate
bool C_getSharedDuplicate(DID did);
RcppExport SEXP _sharedObject_C_getSharedDuplicate(SEXP didSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DID >::type did(didSEXP);
    rcpp_result_gen = Rcpp::wrap(C_getSharedDuplicate(did));
    return rcpp_result_gen;
END_RCPP
}
// C_setCopyOnWrite
void C_setCopyOnWrite(DID did, bool value);
RcppExport SEXP _sharedObject_C_setCopyOnWrite(SEXP didSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DID >::type did(didSEXP);
    Rcpp::traits::input_parameter< bool >::type value(valueSEXP);
    C_setCopyOnWrite(did, value);
    return R_NilValue;
END_RCPP
}
// C_setSharedSub
void C_setSharedSub(DID did, bool value);
RcppExport SEXP _sharedObject_C_setSharedSub(SEXP didSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DID >::type did(didSEXP);
    Rcpp::traits::input_parameter< bool >::type value(valueSEXP);
    C_setSharedSub(did, value);
    return R_NilValue;
END_RCPP
}
// C_setSharedDuplicate
void C_setSharedDuplicate(DID did, bool value);
RcppExport SEXP _sharedObject_C_setSharedDuplicate(SEXP didSEXP, SEXP valueSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DID >::type did(didSEXP);
    Rcpp::traits::input_parameter< bool >::type value(valueSEXP);
    C_setSharedDuplicate(did, value);
    return R_NilValue;
END_RCPP
}
// sharedVector_duplicate
SEXP sharedVector_duplicate(SEXP x);
RcppExport SEXP _sharedObject_sharedVector_duplicate(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sharedVector_duplicate(x));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_sharedObject_C_peekSharedMemory", (DL_FUNC) &_sharedObject_C_peekSharedMemory, 1},
    {"_sharedObject_C_testFunc", (DL_FUNC) &_sharedObject_C_testFunc, 1},
    {"_sharedObject_C_findAvailableKey", (DL_FUNC) &_sharedObject_C_findAvailableKey, 1},
    {"_sharedObject_C_createSharedMemory", (DL_FUNC) &_sharedObject_C_createSharedMemory, 2},
    {"_sharedObject_C_readSharedMemory", (DL_FUNC) &_sharedObject_C_readSharedMemory, 1},
    {"_sharedObject_C_createAltrep", (DL_FUNC) &_sharedObject_C_createAltrep, 1},
    {"_sharedObject_C_clearObj", (DL_FUNC) &_sharedObject_C_clearObj, 1},
    {"_sharedObject_C_getDataID", (DL_FUNC) &_sharedObject_C_getDataID, 0},
    {"_sharedObject_C_getDataInfo", (DL_FUNC) &_sharedObject_C_getDataInfo, 1},
    {"_sharedObject_C_attachAttr", (DL_FUNC) &_sharedObject_C_attachAttr, 3},
    {"_sharedObject_C_ALTREP", (DL_FUNC) &_sharedObject_C_ALTREP, 1},
    {"_sharedObject_C_getCopyOnWrite", (DL_FUNC) &_sharedObject_C_getCopyOnWrite, 1},
    {"_sharedObject_C_getSharedSub", (DL_FUNC) &_sharedObject_C_getSharedSub, 1},
    {"_sharedObject_C_getSharedDuplicate", (DL_FUNC) &_sharedObject_C_getSharedDuplicate, 1},
    {"_sharedObject_C_setCopyOnWrite", (DL_FUNC) &_sharedObject_C_setCopyOnWrite, 2},
    {"_sharedObject_C_setSharedSub", (DL_FUNC) &_sharedObject_C_setSharedSub, 2},
    {"_sharedObject_C_setSharedDuplicate", (DL_FUNC) &_sharedObject_C_setSharedDuplicate, 2},
    {"_sharedObject_sharedVector_duplicate", (DL_FUNC) &_sharedObject_sharedVector_duplicate, 1},
    {NULL, NULL, 0}
};

void init_real_class(DllInfo* dll);
void init_integer_class(DllInfo* dll);
void init_logical_class(DllInfo* dll);
void init_raw_class(DllInfo* dll);
void init_str_class(DllInfo* dll);
RcppExport void R_init_sharedObject(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
    init_real_class(dll);
    init_integer_class(dll);
    init_logical_class(dll);
    init_raw_class(dll);
    init_str_class(dll);
}
